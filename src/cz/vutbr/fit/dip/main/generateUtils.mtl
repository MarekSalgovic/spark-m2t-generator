[comment encoding = UTF-8 /]
[module generateUtils('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import cz::vutbr::fit::dip::services::uml2services /]

[query public getOutputNodes (aClass : Class) : Sequence(Class) = 
aClass.getSourceDirectedRelationships()-> asSequence() -> collect(target.oclAsType(Class))
/]

[query public getInputNodes (aClass : Class) : Sequence(Class) = 
aClass.getTargetDirectedRelationships() -> asSequence() -> collect(source.oclAsType(Class))
/]

[query public getStereotypeNames (aClass : Class) : Sequence(String) = 
aClass.getAppliedStereotypes() -> asSequence() -> collect(name)
/]

[query public isStereotype (aElement : Element, stereotype : String) : Boolean = 
aElement.getAppliedStereotypes() -> asSet() -> exists(s | s.name = stereotype)
/]

[query public getTaggedValue (aElement: Element, stereotype: String, taggedValue: String) : OclAny = 
aElement.getValue(aElement.getAppliedStereotypes() -> select(name = stereotype) -> asSequence() -> first(), taggedValue)
/]

[query public getTypeForFlow(flow: InformationFlow): Type = 
flow.conveyed -> asSequence()-> first()
/]


[template public generateTaggedValuesAsAttributes(eElement : Element)]
[for (s : Stereotype | eElement.getAppliedStereotypes())]
val S_[formatVariable(s.name)/] = true
[for (p : Property | s.getAllAttributes())]
[if p.name <> 'base_Class' and p.name <> 'base_Model']
val TV_[p.name/] = """[formatString(eElement.getTaggedValue(s.name, p.name))/]"""
[/if]
[/for]
[/for]
[/template]

[template public generateImports(aModel : Model)]

import org.apache.spark.SparkConf
import org.apache.spark.rdd._
import org.apache.spark.sql._

import scala.reflect.runtime.universe.TypeTag
import scala.reflect.runtime.universe.typeOf
[for (imp: OclAny | aModel.getTaggedValue('Spark Application', 'imports'))]
import [imp.toString()/]
[/for]
// [protected ('imports')]
// [/protected]
[/template]