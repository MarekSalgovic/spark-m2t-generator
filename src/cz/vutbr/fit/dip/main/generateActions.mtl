[comment encoding = UTF-8 /]
[module generateActions('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import cz::vutbr::fit::dip::main::generateUtils /]
[import cz::vutbr::fit::dip::services::uml2services /]

[template public generateActionClasses(aModel : Model)]
[for (aClass : Class | aModel.eContents(Class))]
[generateClass(aClass, aModel)/]
[/for]
[generateLoopClasses(aModel, aModel)/]
[/template]


[template private generateLoopClasses(aLoop : Model, aModel : Model)]
[for (anInsideLoop : Model | aLoop.eContents(Model))]
[if anInsideLoop.isStereotype('Iteration Loop') or anInsideLoop.isStereotype('Conditional Loop')]
[for (aClass : Class | anInsideLoop.eContents(Class))]
[generateClass(aClass, aModel)/]
[/for]
[generateLoopClasses(anInsideLoop, aModel)/]
[/if]
[/for]
[/template]


[template private generateClass(aClass : Class, aModel : Model)]
[if (aClass.isStereotype('RDD Action') or aClass.isStereotype('Dataset Action'))]
[file ('src/main/scala/'+(formatClassName(aModel.name)+'/actions/' + (formatClassName(aClass.name)) +  '.scala'), false, 'UTF-8')]
package [formatClassName(aModel.name)/].actions

[generateImports(aModel)/]
[if (containsDataTypes(aModel))]
import [formatClassName(aModel.name)/].dataTypes._
[/if]

class [formatClassName(aClass.name)/]([if aClass.isStereotype('Dataset Action')]spark: SparkSession[/if]) {
	[aClass.generateTaggedValuesAsAttributes()/]
	def action['['/]T: TypeTag[']'/](rdd: RDD['['/]T[']'/][generateFunctionDefinitionArguments(aClass, aModel, false)/]) = {
		[if aClass.isStereotype('Dataset Action')]
		import spark.implicits._
		[/if]
		typeOf['['/]T[']'/] match {
			[for (input : Relationship | aClass.getTargetDirectedRelationships())]
			[if input.oclIsTypeOf(InformationFlow)]
			case type[i/] if type[i/] =:= typeOf['['/][input.oclAsType(InformationFlow).getTypeForFlow().generateType(aModel)/][']'/] =>
				rdd.asInstanceOf['['/]RDD['['/][input.oclAsType(InformationFlow).getTypeForFlow().generateType(aModel)/][']'/][']'/]
					[if aClass.isStereotype('RDD Action')]
					[geneteRDD(aClass)/]
					[elseif aClass.isStereotype('Dataset Action')]
					[generateDataset(aClass, input.oclAsType(InformationFlow).getTypeForFlow(), aModel)/]
					[/if]	
			[/if]
			[/for]
		}
	}
	//[protected (aClass.name)]
	//[/protected]
}
[/file]
[/if]
[/template]


[template private geneteRDD(aClass : Class)]
.[aClass.getTaggedValue('RDD Action', 'func')/]
[/template]

[template private generateDataset(aClass : Class, type : Type, aModel : Model)]
.toDS().[aClass.getTaggedValue('Dataset Action', 'func')/]
[/template]


[template public generateInitActions(aModel : Model)]
// actions
[for (aClass : Class | aModel.eContents(Class))]
[if (aClass.isStereotype('RDD Action') or aClass.isStereotype('Dataset Action'))]
[generateInitAction(aClass)/]
[/if]
[/for]
[generateLoopInit(aModel, aModel)/]
[/template]

[template private generateInitAction(aClass : Class)]
val A_[formatVariable(aClass.name)/] = new [formatClassName(aClass.name)/]([if aClass.isStereotype('Dataset Action')]spark[/if])
[/template]

[template private generateLoopInit(aLoop : Model, aModel : Model)]
[for (anInsideLoop : Model | aLoop.eContents(Model))]
[if anInsideLoop.isStereotype('Iteration Loop') or anInsideLoop.isStereotype('Conditional Loop')]
[for (aClass : Class | anInsideLoop.eContents(Class))]
[if (aClass.isStereotype('RDD Action') or aClass.isStereotype('Dataset Action'))]
[generateInitAction(aClass)/]
[/if]
[/for]
[generateLoopInit(anInsideLoop, aModel)/]
[/if]
[/for]
[/template]


